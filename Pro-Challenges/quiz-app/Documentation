### Documentation: Quiz App

#### Overview

This Quiz App is a simple web application that allows users to test their knowledge of CSS by answering multiple-choice questions. The app consists of three main pages: the Start Page, the Quiz Page, and the Result Page. Users can start the quiz, answer questions, and view their results at the end.

#### Technologies Used

1. **HTML**: The structure of the web application.
2. **CSS**: Styling the application using Tailwind CSS.
3. **JavaScript**: Logic and interactivity using React.
4. **React**: A JavaScript library for building user interfaces.
5. **Babel**: A JavaScript compiler that allows us to use JSX syntax.
6. **Boxicons**: Icon library for adding icons to the application.

#### How the App Works

1. **Start Page**:

   - The user is greeted with a start page that includes a title, description, and a "Start" button.
   - When the user clicks the "Start" button, the app transitions to the Quiz Page.

2. **Quiz Page**:

   - The Quiz Page displays a question with multiple-choice options.
   - The user can select an option and submit their answer.
   - If the answer is correct, the option is highlighted in green. If the answer is incorrect, the selected option is highlighted in red, and the correct option is highlighted in green.
   - The user can then proceed to the next question by clicking the "Next" button.
   - The progress of the quiz is displayed at the top of the page.

3. **Result Page**:
   - After answering all the questions, the user is taken to the Result Page.
   - The Result Page displays the user's score and a congratulatory message.
   - The user can restart the quiz by clicking the "Restart Quiz" button.

#### Code Explanation

1. **HTML Structure**:

   - The HTML file includes the necessary meta tags, links to external stylesheets, and scripts for React, ReactDOM, Babel, and Tailwind CSS.
   - The `#root` div is the main container where the React app is rendered.

2. **React Components**:

   - **StartPage**: Displays the start page with a title, description, and a "Start" button.
   - **QuizPage**: Displays the quiz questions and options. Handles the logic for selecting and submitting answers.
   - **ResultPage**: Displays the user's score and a "Restart Quiz" button.

3. **State Management**:

   - The app uses React's [`useState`] and [`useEffect`] hooks to manage the state of the application.
   - The main state variables include [`currentPage`], [`currentQuestionIndex`], [`isSubmitted`], [`score`], and [`animationClass`].

4. **Event Handlers**:

   - **handleStart**: Transitions from the Start Page to the Quiz Page.
   - **handleNext**: Moves to the next question or the Result Page after the user submits an answer.
   - **handleRestart**: Resets the quiz and takes the user back to the Start Page.

5. **Styling**:
   - The app uses Tailwind CSS for styling. Classes are added directly to the HTML elements to apply styles.

#### Example Code Snippets

**StartPage Component**:

```jsx
const StartPage = ({ onStart }) => {
	return (
		<div class="max-w-md text-slate-200 text-center">
			<i class="bx bxl-css3 text-[5rem] mb-4"></i>
			<h1 class="uppercase font-bold text-xl my-2">Quiz App</h1>
			<h2 class="font-semibold mb-4">Test your CSS knowledge</h2>
			<p class="text-sm text-neutral-400">
				Test your CSS knowledge with out quiz app and see if you're a true web
				design whiz!
			</p>
			<button
				class="max-w-[10rem] w-full px-6 py-3 bg-sky-600 rounded-full mt-8 hover:bg-neutral-950 border-2 border-sky-600 hover:border-neutral-700 transition-all duration-300 easy hover:shadow-sm hover:shadow-white/50"
				onClick={onStart}>
				Start
			</button>
		</div>
	);
};
```

**QuizPage Component**:

```jsx
const QuizPage = ({
	question,
	onNext,
	currentQuestionIndex,
	setIsSubmitted,
	updateScore,
}) => {
	const [selectedOption, setSelectedOption] = useState(null);
	const [isCorrect, setIsCorrect] = useState(null);
	const [isSubmitted, setIsSubmittedState] = useState(false);
	const [correctOption, setCorrectOption] = useState(null);

	useEffect(() => {
		setSelectedOption(null);
		setIsCorrect(null);
		setIsSubmittedState(false);
		setCorrectOption(null);
	}, [currentQuestionIndex]);

	const handleOptionClick = (option) => {
		if (!isSubmitted) {
			setSelectedOption(option);
			setIsCorrect(null);
		}
	};

	const handleSubmit = () => {
		if (selectedOption === question.answer) {
			setIsCorrect(true);
			updateScore((prevScore) => prevScore + 1);
		} else {
			setIsCorrect(false);
			setCorrectOption(question.answer);
		}
		setIsSubmitted(true);
		setIsSubmittedState(true);
	};

	return (
		<div class="max-w-[500px] w-full text-slate-200">
			<div class="">
				<div class="flex justify-between mb-4 [&>div]:w-[8%] [&>div]:h-[4px]  [&>div]:rounded-full">
					{questions.map((_, index) => (
						<div
							key={index}
							className={
								index <= currentQuestionIndex ? "bg-sky-500" : "bg-slate-600/50"
							}></div>
					))}
				</div>
				<div class="text-end">
					{currentQuestionIndex + 1} / {questions.length}
				</div>
			</div>
			<div class="text-center text-2xl my-8">
				<h2>{question.question}</h2>
			</div>
			<ul class="text-center [&>li]:p-4 [&>li]:rounded-full flex flex-col gap-4 [&>li]:cursor-pointer [&>li]:transition-all [&>li]:duration-300 [&>li]:easy">
				{question.options.map((option, index) => (
					<li
						key={index}
						class={`hover:bg-slate-500/20 bg-slate-600/20 ${
							selectedOption === option
								? isCorrect === null
									? "bg-slate-400/60"
									: isCorrect
									? "bg-green-500"
									: "bg-red-500"
								: correctOption === option
								? "bg-green-500"
								: ""
						}`}
						onClick={() => handleOptionClick(option)}>
						{option}
					</li>
				))}
			</ul>

			{!isSubmitted ? (
				<button
					class="flex justify-center items-center mx-auto w-[8rem] px-6 py-3 my-6 bg-sky-600 rounded-full hover:bg-neutral-950 border-2 border-sky-600 hover:border-neutral-700 transition-all duration-300 easy hover:shadow-sm hover:shadow-white/50"
					onClick={handleSubmit}
					disabled={selectedOption === null}>
					Submit
				</button>
			) : (
				<button
					class="flex justify-center items-center mx-auto w-[8rem] px-6 py-3 my-6 bg-sky-600 rounded-full hover:bg-neutral-950 border-2 border-sky-600 hover:border-neutral-700 transition-all duration-300 easy hover:shadow-sm hover:shadow-white/50"
					onClick={onNext}>
					Next
				</button>
			)}
		</div>
	);
};
```

**ResultPage Component**:

```jsx
const ResultPage = ({ score, totalQuestions, onRestart }) => {
	return (
		<div class="max-w-[500px] w-full text-slate-200">
			<div class="text-center text-2xl my-8">
				<i class="bx bxs-party text-7xl my-6"></i>
				<h2>Congratulations!</h2>
			</div>
			<div class="text-center text-2xl my-8">
				<h3>
					You scored{" "}
					<span class="text-sky-600">
						{score} / {totalQuestions}
					</span>{" "}
					right answers.
				</h3>
			</div>
			<button
				class="flex justify-center items-center mx-auto w-[10rem] px-6 py-3 my-6 bg-sky-600 rounded-full hover:bg-neutral-950 border-2 border-sky-600 hover:border-neutral-700 transition-all duration-300 easy hover:shadow-sm hover:shadow-white/50"
				onClick={onRestart}>
				Restart Quiz
			</button>
		</div>
	);
};
```

**App Component**:

```jsx
function App() {
	const [currentPage, setCurrentPage] = useState("start");
	const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
	const [isSubmitted, setIsSubmitted] = useState(false);
	const [score, setScore] = useState(0);
	const [animationClass, setAnimationClass] = useState("fade-in");

	const handleStart = () => {
		setAnimationClass("fade-out");
		setTimeout(() => {
			setCurrentPage("quiz");
			setAnimationClass("fade-in");
		}, 500);
	};

	const handleNext = () => {
		setTimeout(() => {
			setAnimationClass("fade-out");
			if (currentQuestionIndex < questions.length - 1) {
				setCurrentQuestionIndex((prevIndex) => prevIndex + 1);
			} else {
				setCurrentPage("result");
			}
			setIsSubmitted(false);
			setAnimationClass("fade-in");
		}, 500);
	};

	const handleRestart = () => {
		setAnimationClass("fade-out");
		setTimeout(() => {
			setCurrentPage("start");
			setCurrentQuestionIndex(0);
			setIsSubmitted(false);
			setScore(0);
			setAnimationClass("fade-in");
		}, 500);
	};

	return (
		<div class="w-full h-full overflow-hidden">
			<div class="absolute top-0 z-[-2] h-screen w-screen bg-neutral-950 bg-[radial-gradient(ellipse_80%_80%_at_50%_-20%,rgba(120,119,198,0.3),rgba(255,255,255,0))]"></div>

			<main
				class={`w-full h-screen flex justify-center items-center overflow-hidden realtive ${animationClass}`}>
				{currentPage === "start" && <StartPage onStart={handleStart} />}
				{currentPage === "quiz" && (
					<QuizPage
						question={questions[currentQuestionIndex]}
						onNext={handleNext}
						currentQuestionIndex={currentQuestionIndex}
						setIsSubmitted={setIsSubmitted}
						updateScore={setScore}
					/>
				)}

				{currentPage === "result" && (
					<ResultPage
						score={score}
						totalQuestions={questions.length}
						onRestart={handleRestart}
					/>
				)}
			</main>
		</div>
	);
}

ReactDOM.render(<App />, document.getElementById("root"));
```

This documentation provides an overview of how the Quiz App works, the technologies used, and a detailed explanation of the code and its functionality.
